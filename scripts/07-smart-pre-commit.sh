#!/bin/bash

# FR: Pre-commit hook intelligent pour d√©veloppeurs d√©butants
# EN: Smart pre-commit hook for beginner developers
# Usage: Appel√© automatiquement par Git avant chaque commit

set -e

# Configuration
LOG_DIR="logs"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="$LOG_DIR/pre_commit_$TIMESTAMP.log"
mkdir -p "$LOG_DIR"

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    
    case $level in
        "INFO")
            echo -e "${GREEN}[PRE-COMMIT]${NC} $message"
            ;;
        "WARN")
            echo -e "${YELLOW}[PRE-COMMIT]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[PRE-COMMIT]${NC} $message"
            ;;
        "SUCCESS")
            echo -e "${GREEN}[PRE-COMMIT]${NC} $message"
            ;;
    esac
}

# V√©rification intelligente des fichiers modifi√©s
check_staged_files() {
    local staged_files=$(git diff --cached --name-only)
    
    if [ -z "$staged_files" ]; then
        log "WARN" "‚ö†Ô∏è Aucun fichier stag√© pour le commit"
        log "WARN" "üí° Utilisez: git add <fichiers> avant de committer"
        return 1
    fi
    
    log "INFO" "üìÅ Fichiers √† committer:"
    echo "$staged_files" | while read -r file; do
        [ -n "$file" ] && log "INFO" "   - $file"
    done
    
    return 0
}

# V√©rification ESLint automatique avec r√©paration
check_and_fix_eslint() {
    log "INFO" "üîç V√©rification ESLint..."
    
    # Obtenir les fichiers TypeScript/JavaScript stag√©s
    local ts_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$' || true)
    
    if [ -z "$ts_files" ]; then
        log "INFO" "‚úÖ Aucun fichier TypeScript/JavaScript √† v√©rifier"
        return 0
    fi
    
    log "INFO" "üìù Fichiers √† v√©rifier:"
    echo "$ts_files" | while read -r file; do
        [ -n "$file" ] && log "INFO" "   - $file"
    done
    
    # V√©rifier ESLint sur les fichiers stag√©s
    local temp_log=$(mktemp)
    if echo "$ts_files" | xargs pnpm lint > "$temp_log" 2>&1; then
        log "SUCCESS" "‚úÖ ESLint: Aucune erreur d√©tect√©e"
        rm -f "$temp_log"
        return 0
    fi
    
    log "WARN" "‚ö†Ô∏è Erreurs ESLint d√©tect√©es"
    
    # Tentative de r√©paration automatique
    log "INFO" "üîß Tentative de r√©paration automatique..."
    if echo "$ts_files" | xargs pnpm lint --fix > /dev/null 2>&1; then
        # Re-stager les fichiers corrig√©s
        echo "$ts_files" | xargs git add
        
        # V√©rifier si les erreurs sont r√©solues
        if echo "$ts_files" | xargs pnpm lint > /dev/null 2>&1; then
            log "SUCCESS" "üéâ Erreurs ESLint corrig√©es automatiquement !"
            log "INFO" "üìù Fichiers mis √† jour et re-stag√©s"
            rm -f "$temp_log"
            return 0
        fi
    fi
    
    # Si la r√©paration automatique a √©chou√©
    log "ERROR" "‚ùå Erreurs ESLint non r√©parables automatiquement"
    log "ERROR" ""
    log "ERROR" "üîß ACTIONS REQUISES :"
    log "ERROR" ""
    
    # Analyser les erreurs sp√©cifiques
    local error_count=$(grep -c "error" "$temp_log" 2>/dev/null || echo "0")
    local warning_count=$(grep -c "warning" "$temp_log" 2>/dev/null || echo "0")
    
    log "ERROR" "üìä R√©sum√©: $error_count erreurs, $warning_count avertissements"
    log "ERROR" ""
    
    # Montrer les premi√®res erreurs
    log "ERROR" "üö® Premi√®res erreurs √† corriger :"
    head -10 "$temp_log" | while read -r line; do
        [ -n "$line" ] && log "ERROR" "   $line"
    done
    log "ERROR" ""
    
    log "ERROR" "üí° SOLUTIONS RAPIDES :"
    log "ERROR" "   1. Corriger automatiquement: ./scripts/05-fix-eslint.sh"
    log "ERROR" "   2. Voir toutes les erreurs: pnpm lint"
    log "ERROR" "   3. Corriger manuellement puis: git add <fichiers>"
    log "ERROR" "   4. Ignorer temporairement: git commit --no-verify"
    log "ERROR" ""
    
    rm -f "$temp_log"
    return 1
}

# V√©rification TypeScript
check_typescript() {
    log "INFO" "üîç V√©rification TypeScript..."
    
    local temp_log=$(mktemp)
    if pnpm type-check > "$temp_log" 2>&1; then
        log "SUCCESS" "‚úÖ TypeScript: Aucune erreur de type"
        rm -f "$temp_log"
        return 0
    fi
    
    log "ERROR" "‚ùå Erreurs TypeScript d√©tect√©es"
    log "ERROR" ""
    
    # Analyser les erreurs TypeScript
    local ts_errors=$(grep -E "TS[0-9]+" "$temp_log" | head -5)
    if [ -n "$ts_errors" ]; then
        log "ERROR" "üö® Erreurs de type d√©tect√©es :"
        echo "$ts_errors" | while read -r error; do
            [ -n "$error" ] && log "ERROR" "   $error"
        done
        log "ERROR" ""
    fi
    
    log "ERROR" "üí° SOLUTIONS :"
    log "ERROR" "   1. Voir toutes les erreurs: pnpm type-check"
    log "ERROR" "   2. Corriger les types dans les fichiers list√©s"
    log "ERROR" "   3. Aide TypeScript: ./scripts/05-fix-eslint.sh"
    log "ERROR" "   4. Ignorer temporairement: git commit --no-verify"
    log "ERROR" ""
    
    rm -f "$temp_log"
    return 1
}

# V√©rification des tests (si disponibles)
check_tests() {
    # V√©rifier si des tests existent
    if [ ! -f "package.json" ] || ! grep -q '"test"' package.json; then
        log "INFO" "‚ÑπÔ∏è Aucun test configur√© - ignor√©"
        return 0
    fi
    
    log "INFO" "üß™ V√©rification des tests..."
    
    local temp_log=$(mktemp)
    if pnpm test --passWithNoTests > "$temp_log" 2>&1; then
        log "SUCCESS" "‚úÖ Tests: Tous les tests passent"
        rm -f "$temp_log"
        return 0
    fi
    
    log "WARN" "‚ö†Ô∏è √âchec des tests d√©tect√©"
    log "WARN" ""
    log "WARN" "üí° RECOMMANDATIONS :"
    log "WARN" "   1. Corriger les tests qui √©chouent"
    log "WARN" "   2. Voir les d√©tails: pnpm test"
    log "WARN" "   3. Continuer sans tests: git commit --no-verify"
    log "WARN" ""
    
    # Ne pas bloquer le commit pour les tests (warning seulement)
    rm -f "$temp_log"
    return 0
}

# V√©rification de la taille des fichiers
check_file_sizes() {
    log "INFO" "üìè V√©rification de la taille des fichiers..."
    
    local large_files=$(git diff --cached --name-only | xargs -I {} sh -c 'if [ -f "{}" ]; then echo "$(wc -c < "{}") {}"; fi' | awk '$1 > 1048576 {print $2 " (" int($1/1024/1024) "MB)"}')
    
    if [ -n "$large_files" ]; then
        log "WARN" "‚ö†Ô∏è Fichiers volumineux d√©tect√©s (>1MB) :"
        echo "$large_files" | while read -r file; do
            [ -n "$file" ] && log "WARN" "   - $file"
        done
        log "WARN" ""
        log "WARN" "üí° Consid√©rez :"
        log "WARN" "   - Compresser les images"
        log "WARN" "   - Utiliser Git LFS pour les gros fichiers"
        log "WARN" "   - V√©rifier si ces fichiers doivent √™tre versionn√©s"
        log "WARN" ""
    fi
    
    return 0
}

# V√©rification des secrets potentiels
check_secrets() {
    log "INFO" "üîê V√©rification des secrets potentiels..."
    
    local staged_files=$(git diff --cached --name-only)
    local secrets_found=""
    
    # Patterns de secrets courants
    local patterns=(
        "password\s*=\s*['\"][^'\"]{8,}"
        "api[_-]?key\s*=\s*['\"][^'\"]{16,}"
        "secret\s*=\s*['\"][^'\"]{16,}"
        "token\s*=\s*['\"][^'\"]{16,}"
        "private[_-]?key"
        "-----BEGIN.*PRIVATE KEY-----"
    )
    
    for file in $staged_files; do
        if [ -f "$file" ]; then
            for pattern in "${patterns[@]}"; do
                if grep -iE "$pattern" "$file" >/dev/null 2>&1; then
                    secrets_found="$secrets_found\n   - $file (pattern: ${pattern%% *})"
                fi
            done
        fi
    done
    
    if [ -n "$secrets_found" ]; then
        log "ERROR" "üö® Secrets potentiels d√©tect√©s :"
        echo -e "$secrets_found"
        log "ERROR" ""
        log "ERROR" "üí° ACTIONS REQUISES :"
        log "ERROR" "   1. V√©rifier que ce ne sont pas de vrais secrets"
        log "ERROR" "   2. Utiliser des variables d'environnement"
        log "ERROR" "   3. Ajouter au .gitignore si n√©cessaire"
        log "ERROR" "   4. Forcer le commit: git commit --no-verify"
        log "ERROR" ""
        return 1
    fi
    
    log "SUCCESS" "‚úÖ Aucun secret d√©tect√©"
    return 0
}

# Fonction principale du pre-commit hook
main() {
    log "INFO" "üöÄ Pre-commit Hook Intelligent - V√©rifications automatiques"
    log "INFO" ""
    
    local exit_code=0
    
    # 1. V√©rifier les fichiers stag√©s
    if ! check_staged_files; then
        exit_code=1
    fi
    
    # 2. V√©rifier et corriger ESLint
    if ! check_and_fix_eslint; then
        exit_code=1
    fi
    
    # 3. V√©rifier TypeScript
    if ! check_typescript; then
        exit_code=1
    fi
    
    # 4. V√©rifier les tests (non bloquant)
    check_tests
    
    # 5. V√©rifier la taille des fichiers (non bloquant)
    check_file_sizes
    
    # 6. V√©rifier les secrets potentiels
    if ! check_secrets; then
        exit_code=1
    fi
    
    log "INFO" ""
    if [ $exit_code -eq 0 ]; then
        log "SUCCESS" "üéâ Toutes les v√©rifications sont pass√©es !"
        log "SUCCESS" "‚úÖ Commit autoris√©"
    else
        log "ERROR" "‚ùå Des probl√®mes ont √©t√© d√©tect√©s"
        log "ERROR" ""
        log "ERROR" "üí° OPTIONS :"
        log "ERROR" "   1. Corriger les probl√®mes list√©s ci-dessus"
        log "ERROR" "   2. Utiliser les scripts d'aide :"
        log "ERROR" "      - ./scripts/05-fix-eslint.sh"
        log "ERROR" "      - ./scripts/06-detect-refactor.sh"
        log "ERROR" "   3. Forcer le commit (non recommand√©) :"
        log "ERROR" "      - git commit --no-verify"
        log "ERROR" ""
    fi
    
    log "INFO" "üìù Log d√©taill√©: $LOG_FILE"
    
    exit $exit_code
}

# Ex√©cuter le hook
main "$@"
